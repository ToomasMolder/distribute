###################################################################
# Script Name   : .my_bash_aliases
# Script version: 1.02
# Script date   : 2021-01-17
# Description   : Get my handy aliases
# Usage         : /bin/cat ~/.my_bash_aliases >> ~/.bash_aliases; source ~/.bash_aliases
# Author        : Toomas MÃ¶lder
# Email         : toomas.molder@gmail.com
###################################################################
#
# Additional notes:
# You may want to put all your additions into a separate file like ~/.bash_aliases
# Usage from ~/.bashrc
# if [ -f ~/.bash_aliases ]; then
#     . ~/.bash_aliases
# fi

alias a=alias
alias cc='/usr/bin/clear'
alias ce='crontab -e'
alias cl='crontab -l'
alias dfh='/bin/df --human-readable'
alias duh='/usr/bin/du --human-readable'
alias dus='/usr/bin/du --summarize --human-readable'
alias dux='sudo /usr/bin/du --all --human-readable --max-depth=1 / | sort --human-numeric-sort --reverse'
alias h=history
alias hgrep='history | /bin/egrep --ignore-case ${1}'
alias lart='/bin/ls --all -l --reverse -t'
alias less='/bin/less --RAW-CONTROL-CHARS'
alias ll='/bin/ls -l'
alias lrt='/bin/ls -l --reverse -t'
alias reboot='history -a; sudo reboot now'
alias rm='/bin/rm --interactive'
alias rmf='/bin/rm'
alias s='screen'
alias sls='screen -ls'
alias srd='screen -r -d ${1}'
# Use alias 'sss' instead of 'ss', which is another utility to investigate sockets https://man7.org/linux/man-pages/man8/ss.8.html
alias sss='screen -S ${1}'
alias tf='/usr/bin/tail --follow'
alias update='sudo apt-get update; sudo apt-get dist-upgrade; sudo apt-get autoremove; read -p "Done. Press any key to continue... " -n1 -s; echo; cat /var/run/reboot-required; cat /var/run/reboot-required.pkgs; read -p "Reboot now? Press Ctrl-C to cancel or any key to reboot now... " -n1 -s; history -a; sudo reboot now'
alias update_y='sudo apt-get --assume-yes update; sudo apt-get --assume-yes dist-upgrade; sudo apt-get --assume-yes autoremove; read -p "Done. Press any key to continue... " -n1 -s; echo; cat /var/run/reboot-required; cat /var/run/reboot-required.pkgs; read -p "Reboot now? Press Ctrl-C to cancel or any key to reboot now... " -n1 -s; history -a; sudo reboot now'

#
# Service status|stop|start|restart
#
# For status it is OK to use all parameters "$@"
status() { sudo systemctl --no-pager --full status "$@"; }
# For others, try to be specific
stop() { sudo systemctl stop ${1}.service; }
start() { sudo systemctl start ${1}.service; }
restart() { sudo systemctl restart ${1}.service; }

#
# Journalctl
#
j() { sudo journalctl --unit=${1} | tail --lines=20; }

#
# Convert epoch date into human readable format
#
epoch() { /bin/date --date=@$1; }

#
# Find file from current point in directory tree
#
ff() { find . -printf "%TY-%Tm-%Td\t%s\t%p\n" | grep ${1}; }

#
# Find string within files from current point in directory tree
#
fsf() {
        # find . -type f -print0 | xargs -I {} --null grep ${1} "{}"
        find . -iname "*" -type f -print0 | xargs --null grep --with-filename ${1}
}

#
# Find string within files from current point up to /
#
dnif() {
    # Recursively list a file from PWD up the directory tree to root
    [[ -n ${1} ]] || { echo "dnif [ls-opts] name"; return 1; }
    local THERE=${PWD} RC=2
    while [[ ${THERE} != / ]]
        do [[ -e ${THERE}/${2:-$1} ]] && { ls ${2:+$1} ${THERE}/${2:-$1}; RC=0; }
            THERE=$(dirname ${THERE})
        done
    [[ -e ${THERE}/${2:-$1} ]] && { ls ${2:+$1} /${2:-$1}; RC=0; }
    return ${RC}
}